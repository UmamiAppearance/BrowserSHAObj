var SHAObj=function(){"use strict";
/*
    * [BaseEx]{@link https://github.com/UmamiAppearance/BaseExJS}
    *
    * @version 0.3.2
    * @author UmamiAppearance [mail@umamiappearance.eu]
    * @license GPL-3.0 AND BSD-3-Clause (Base91, Copyright (c) 2000-2006 Joachim Henke)
    */class t{constructor(t="default",e="str",s="str"){this.charsets={default:"0123456789abcdef"},this.IOtypes=["str","bytes"],this.utils=new o(this),[this.version,this.defaultInput,this.defaultOutput]=this.utils.validateArgs([t,e,s]),this.converter=new n(16,1,2),this.converter.padAmount=[0]}encode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.setIOType(e,"in"),r=this.utils.getVersion(e);t=this.utils.validateInput(t,s);const i="str"===s?(new TextEncoder).encode(t):t;return this.converter.encode(i,this.charsets[r])[0]}decode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.getVersion(e),r=this.utils.setIOType(e,"out");(t=(t=String(t).replace(/^0x/,"")).toLowerCase()).length%2&&(t="0".concat(t));const i=this.converter.decode(t,this.charsets[s]);return"bytes"===r?i:(new TextDecoder).decode(i)}}class e{constructor(t="rfc4648",e="str",s="str",r=!0){this.charsets={rfc3548:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",rfc4648:"0123456789ABCDEFGHIJKLMNOPQRSTUV"},this.padding=Boolean(r),this.IOtypes=["str","bytes"],this.utils=new o(this),[this.version,this.defaultInput,this.defaultOutput]=this.utils.validateArgs([t,e,s]),this.converter=new n(32,5,8),this.converter.padAmount=[0,1,3,4,6]}encode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.setIOType(e,"in"),r=this.utils.getVersion(e);t=this.utils.validateInput(t,s);const i="str"===s?(new TextEncoder).encode(t):t;let n,o;if([n,o]=this.converter.encode(i,this.charsets[r]),o){const t=this.converter.padAmount[o];n=n.slice(0,n.length-t),this.padding&&(n=n.concat("=".repeat(t)))}return n}decode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.getVersion(e),r=this.utils.setIOType(e,"out"),i=(t=t.toUpperCase()).length%8;i&&(t=t.padEnd(t.length+8-i,"="));const n=this.converter.decode(t,this.charsets[s]);return"bytes"===r?n:(new TextDecoder).decode(n)}}class s{constructor(t="default",e="str",s="str",r=!0){const i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";this.charsets={default:i.concat("+/"),urlsafe:i.concat("-_")},this.padding=Boolean(r),this.IOtypes=["str","bytes"],this.utils=new o(this),[this.version,this.defaultInput,this.defaultOutput]=this.utils.validateArgs([t,e,s]),this.converter=new n(64,3,4),this.converter.padAmount=[0,1,2]}encode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.setIOType(e,"in"),r=this.utils.getVersion(e);t=this.utils.validateInput(t,s);const i="str"===s?(new TextEncoder).encode(t):t;let n,o;if([n,o]=this.converter.encode(i,this.charsets[r]),o){const t=this.converter.padAmount[o];n=n.slice(0,n.length-t),this.padding&&(n=n.concat("=".repeat(t)))}return n}decode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.getVersion(e),r=this.utils.setIOType(e,"out"),i=t.length%4;i&&(t=t.padEnd(t.length+4-i,"="));const n=this.converter.decode(t,this.charsets[s]);return"bytes"===r?n:(new TextDecoder).decode(n)}}class r{constructor(t="ascii85",e="str",s="str",r=!1){const i="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu";this.charsets={ascii85:i,adobe:i,rfc1924:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~",z85:"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#"},this.IOtypes=["str","bytes"],this.utils=new o(this),this.expandUtils(r),[this.version,this.defaultInput,this.defaultOutput]=this.utils.validateArgs([t,e,s]),this.converter=new n(85,4,5),this.converter.padAmount=[0]}encode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.setIOType(e,"in"),r=this.utils.getVersion(e);t=this.utils.validateInput(t,s);const i="str"===s?(new TextEncoder).encode(t):t;let n,o,h=null;return r.match(/adobe|ascii85/)&&(h=(t,e)=>e||"!!!!!"!==t?t:"z"),[n,o]=this.converter.encode(i,this.charsets[r],h),n=n.slice(0,n.length-o),"adobe"===r&&(n=`<~${n}~>`),"rfc1924"===r&&this.utils.announce(),n}decode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.getVersion(e),r=this.utils.setIOType(e,"out");t=t.replace(/\s/g,""),s.match(/adobe|ascii85/)&&(t=t.replace(/z/g,"!!!!!"),"adobe"===s&&(t=t.replace(/^<~|~>$/g,"")));const i=this.converter.decode(t,this.charsets[s]);return"bytes"===r?i:(new TextDecoder).decode(i)}expandUtils(t){this.utils.announce=()=>{if(!t){const t=new Date;if(3===t.getMonth()&&1===t.getDate())console.log("         __\n _(\\    |@@|\n(__/\\__ \\--/ __\n   \\___|----|  |   __\n       \\ }{ /\\ )_ / _\\\n       /\\__/\\ \\__O (__\n      (--/--)    \\__/\n      _)(  )(_\n     `---''---`");else{const e=t.getTime();t.setMonth(3,1),t.setHours(0,0,0),t.getTime()<e&&t.setFullYear(t.getFullYear()+1);const s=t-e,r=`Time left: ${Math.floor(s/864e5)} days, ${Math.floor(s%864e5/36e5)} hours, ${Math.floor(s%36e5/6e4)} minutes`;this.utils.warning("Only the charset is used. The input is not taken as a 128 bit integer. (because this is madness)"),this.utils.warning(r)}}}}}class i{constructor(t="default",e="str",s="str"){this.charsets={default:'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%&()*+,./:;<=>?@[]^_`{|}~"'},this.IOtypes=["str","bytes"],this.utils=new o(this),this.utils.binPow={13:8192,14:16384},this.utils.divmod=(t,e)=>[Math.floor(t/e),t%e],[this.version,this.defaultInput,this.defaultOutput]=this.utils.validateArgs([t,e,s])}encode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.setIOType(e,"in"),r=this.utils.getVersion(e);t=this.utils.validateInput(t,s);const i="str"===s?(new TextEncoder).encode(t):t;let n=0,o=0,h="";const a=this.charsets[r];if(i.forEach((t=>{if(o+=t<<n,n+=8,n>13){let t,e,s=13,r=o%this.utils.binPow[13];r<89&&(s=14,r=o%this.utils.binPow[14]),o>>=s,n-=s,[t,e]=this.utils.divmod(r,91),h=`${h}${a[e]}${a[t]}`}})),n){let t,e;[t,e]=this.utils.divmod(o,91),h=h.concat(a[e]),(n>7||o>90)&&(h=h.concat(a[t]))}return h}decode(t,...e){e=this.utils.validateArgs(e);const s=this.utils.getVersion(e),r=this.utils.setIOType(e,"out");let i=(t=t.replace(/\s/g,"")).length,n=!1;i%2&&(n=!0,i--);let o=0,h=0;const a=this.charsets[s],c=new Array;for(let e=0;e<i;e+=2){const s=a.indexOf(t[e])+91*a.indexOf(t[e+1]);o=(s<<h)+o,h+=s%this.utils.binPow[13]>88?13:14;do{c.push(o%256),o>>=8,h-=8}while(h>7)}if(n){const e=t.charAt(i),s=a.indexOf(e);c.push(((s<<h)+o)%256)}const l=Uint8Array.from(c);return"bytes"===r?l:(new TextDecoder).decode(l)}}class n{constructor(t,e,s){this.radix=t,this.bsEnc=e,this.bsDec=s}encode(t,e,s=null){let r="",i=0;const n=this.bsEnc;if(n>6)throw new RangeError("The given blocksize may require big integers (> 2^53) during conversion.\nThis is not supported.");for(let o=0,h=t.length;o<h;o+=n){let h=t.slice(o,o+n);if(h.length<n){i=n-h.length;const t=new Uint8Array(n);t.set(h),h=t}let a=0;h.forEach(((t,e)=>a+=t*this.pow(256,n-1-e)));const c=new Array;let l,u=a;for(;u>=this.radix;)[u,l]=this.divmod(u,this.radix),c.unshift(l);for(c.unshift(u);c.length<this.bsDec;)c.unshift(0);let d="";c.forEach((t=>d=d.concat(e[t]))),s&&(d=s(d,i)),r=r.concat(d)}return[r,i]}decode(t,e){const s=this.bsDec;let r=0;const i=Uint8Array.from(t.split("").map((t=>{const s=e.indexOf(t);return s<0?(r++,0):s})));let n=this.padAmount.indexOf(r),o=new Array;for(let e=0,r=t.length;e<r;e+=s){let t=i.slice(e,e+s);if(t.length<s){n=s-t.length;const e=Uint8Array.from(Array(s).fill(this.radix-1));e.set(t),t=e}const r=new Array;let h=0;t.forEach(((t,e)=>h+=t*this.pow(this.radix,s-1-e)));let a,c=h;for(;c>=256;)[c,a]=this.divmod(c,256),r.unshift(a);for(r.unshift(c);r.length<this.bsEnc;)r.unshift(0);o=o.concat(r)}return Uint8Array.from(o.slice(0,o.length-n))}divmod(t,e){return[Math.floor(t/e),t%e]}pow(t,e){return{16:[1,16],32:[1,32,1024,32768,32**4,32**5,32**6,32**7],64:[1,64,4096,64**3],85:[1,85,7225,85**3,85**4],256:[1,256,65536,256**3,256**4]}[t][e]}}class o{constructor(t){this.root=t,"charsets"in t&&this.charsetUserToolsConstructor()}charsetUserToolsConstructor(){this.root.addCharset=(t,e)=>{if("string"!=typeof t)throw new TypeError("The charset name must be a string.");const s=this.root.converter.radix;let r=s;if("string"==typeof e||Array.isArray(e))r=e.length,e=new Set(e);else if(!(e instanceof Set))throw new TypeError("The charset must be one of the types:\n'str', 'set', 'array'.");if(e.size!==s)throw r===s?new Error("There were repetitive chars found in your charset. Make sure each char is unique."):new Error(`The the length of the charset must be ${s}.`);e=[...e].join(""),this.root.charsets[t]=e,console.log(`New charset added with the name '${t}' added and ready to use`)},this.root.setDefaultVersion=t=>[this.root.version]=this.validateArgs([t])}makeArgList(t){return t.map((t=>`'${t}'`)).join(", ")}setIOType(t,e){let s;return s=t.includes("bytes")?"bytes":t.includes("str")?"str":"in"===e?this.root.defaultInput:this.root.defaultOutput,s}getVersion(t){let e=this.root.version;return t.forEach((t=>{t in this.root.charsets&&(e=t)})),e}validateArgs(t){let e,s=null;const r=new Array;return"charsets"in this.root?(s=Object.keys(this.root.charsets),e=[...this.root.IOtypes,...s]):e=this.root.IOtypes,t.length&&t.forEach((t=>{if(t=String(t).toLowerCase(),!e.includes(t)){const e=s?`The options for version (charset) are:\n${this.makeArgList(s)}\n\n`:"";throw new TypeError(`'${t}'\n\nValid arguments for in- and output-type are:\n${this.makeArgList(this.root.IOtypes)}\n\n${e}Traceback:`)}r.push(t)})),r}validateInput(t,e){if("str"===e)return"string"!=typeof t&&this.warning("Your input was converted into a string."),String(t);if("string"==typeof t)throw new TypeError("Your provided input is a string, but some kind of (typed) Array is expected.");if(!ArrayBuffer.isView(t)&&!Array.isArray(t))throw new TypeError("Input must be some kind of (typed) Array if input type is set to 'bytes'.");return t}warning(t){Object.prototype.hasOwnProperty.call(console,"warn")?console.warn(t):console.log(`___\n${t}\n`)}}
/*
    * [BrowserSHAObj]{@link https://github.com/UmamiAppearance/BrowserSHAObj}
    *
    * @version 0.1.0
    * @author UmamiAppearance [mail@umamiappearance.eu]
    * @license GPL-3.0
    */
class h{constructor(t="SHA-256",e=null){const s=this.constructor.getAlgorithms();if(t=`SHA-${String(t).match(/[0-9]+/)[0]}`,!s.includes(t))throw new Error(`Invalid algorithm.\nValid arguments are: "${s.join(", ")}".`);return this.algorithm=t,this.hash={},this.hash.array=null,this.hash.update=this.makeHashArray.bind(this),null!==e&&this.makeHashArray(e),this.hash}static getAlgorithms(){return["SHA-1","SHA-256","SHA-384","SHA-512"]}async makeHashArray(t){t=this.testInput(t);const e=await window.crypto.subtle.digest(this.algorithm,t);return this.hash.array=new Uint8Array(e),this.addConverters(),!0}async addConverters(){if(this.hash.hasConverters)return;this.hash.toHex=()=>this.baseEx.base16.encode(this.hash.array);const t=Object.keys(this.baseEx).slice(1);for(const s of t)this.hash[`to${e=s,e.charAt(0).toUpperCase().concat(e.slice(1))}`]=()=>this.baseEx[s].encode(this.hash.array);var e;this.hash.hasConverters=!0}testInput(t){if("string"==typeof t)t=(new TextEncoder).encode(t);else if(!(t instanceof ArrayBuffer||ArrayBuffer.isView(t)))throw new TypeError("Input must be of type String, ArrayBuffer or ArrayBufferView (typed array)");return t}}return h.prototype.baseEx=new class{constructor(n="str",o="str"){this.base16=new t("default",n,o),this.base32_rfc3548=new e("rfc3548",n,o),this.base32_rfc4648=new e("rfc4648",n,o),this.base64=new s("default",n,o),this.base64_urlsafe=new s("urlsafe",n,o),this.base85adobe=new r("adobe",n,o),this.base85ascii=new r("ascii85",n,o),this.base85_z85=new r("z85",n,o),this.base91=new i("default",n,o)}}("bytes"),h}();
